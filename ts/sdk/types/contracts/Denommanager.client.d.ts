/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, ConvertResponse, ConfigResponse } from "./Denommanager.types";
export interface DenommanagerReadOnlyInterface {
    contractAddress: string;
    getConfig: () => Promise<ConfigResponse>;
    convert: ({ token }: {
        token: string;
    }) => Promise<ConvertResponse>;
}
export declare class DenommanagerQueryClient implements DenommanagerReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getConfig: () => Promise<ConfigResponse>;
    convert: ({ token }: {
        token: string;
    }) => Promise<ConvertResponse>;
}
export interface DenommanagerInterface extends DenommanagerReadOnlyInterface {
    contractAddress: string;
    sender: string;
    addAlias: ({ denom, token }: {
        denom: string;
        token: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    changeOwner: ({ newOwner }: {
        newOwner: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    grantRole: ({ addr, role }: {
        addr: Addr;
        role: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revokeRole: ({ addr, role }: {
        addr: Addr;
        role: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pause: ({ expiresAt }: {
        expiresAt: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    release: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class DenommanagerClient extends DenommanagerQueryClient implements DenommanagerInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    addAlias: ({ denom, token }: {
        denom: string;
        token: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    changeOwner: ({ newOwner }: {
        newOwner: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    grantRole: ({ addr, role }: {
        addr: Addr;
        role: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revokeRole: ({ addr, role }: {
        addr: Addr;
        role: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pause: ({ expiresAt }: {
        expiresAt: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    release: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Denommanager.client.d.ts.map