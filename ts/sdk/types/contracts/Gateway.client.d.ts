/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Addr, HexBinary, CosmosMsgForEmpty, Coin, ConfigResponse } from "./Gateway.types";
export interface GatewayReadOnlyInterface {
    contractAddress: string;
    getConfig: () => Promise<ConfigResponse>;
}
export declare class GatewayQueryClient implements GatewayReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getConfig: () => Promise<ConfigResponse>;
}
export interface GatewayInterface extends GatewayReadOnlyInterface {
    contractAddress: string;
    sender: string;
    changeOwner: ({ newOwner, newPublicKey }: {
        newOwner: Addr;
        newPublicKey: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    changeLiquidityManager: ({ newLiquidityManager }: {
        newLiquidityManager: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    changeDenomManager: ({ newDenomManager }: {
        newDenomManager: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pause: ({ expiresAt }: {
        expiresAt: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    send: ({ opArgs, opId }: {
        opArgs: string[];
        opId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    execute: ({ msgs, signature }: {
        msgs: CosmosMsgForEmpty[];
        signature: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    release: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class GatewayClient extends GatewayQueryClient implements GatewayInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    changeOwner: ({ newOwner, newPublicKey }: {
        newOwner: Addr;
        newPublicKey: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    changeLiquidityManager: ({ newLiquidityManager }: {
        newLiquidityManager: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    changeDenomManager: ({ newDenomManager }: {
        newDenomManager: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pause: ({ expiresAt }: {
        expiresAt: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    send: ({ opArgs, opId }: {
        opArgs: string[];
        opId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    execute: ({ msgs, signature }: {
        msgs: CosmosMsgForEmpty[];
        signature: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    release: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Gateway.client.d.ts.map