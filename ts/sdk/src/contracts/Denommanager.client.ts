/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Addr, QueryMsg, ConvertResponse, ConfigResponse } from "./Denommanager.types";
export interface DenommanagerReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<ConfigResponse>;
  convert: ({
    token
  }: {
    token: string;
  }) => Promise<ConvertResponse>;
}
export class DenommanagerQueryClient implements DenommanagerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.convert = this.convert.bind(this);
  }

  getConfig = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  convert = async ({
    token
  }: {
    token: string;
  }): Promise<ConvertResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      convert: {
        token
      }
    });
  };
}
export interface DenommanagerInterface extends DenommanagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  addAlias: ({
    denom,
    token
  }: {
    denom: string;
    token: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  changeOwner: ({
    newOwner
  }: {
    newOwner: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  grantRole: ({
    addr,
    role
  }: {
    addr: Addr;
    role: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  revokeRole: ({
    addr,
    role
  }: {
    addr: Addr;
    role: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  pause: ({
    expiresAt
  }: {
    expiresAt: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  release: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class DenommanagerClient extends DenommanagerQueryClient implements DenommanagerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addAlias = this.addAlias.bind(this);
    this.changeOwner = this.changeOwner.bind(this);
    this.grantRole = this.grantRole.bind(this);
    this.revokeRole = this.revokeRole.bind(this);
    this.pause = this.pause.bind(this);
    this.release = this.release.bind(this);
  }

  addAlias = async ({
    denom,
    token
  }: {
    denom: string;
    token: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_alias: {
        denom,
        token
      }
    }, fee, memo, funds);
  };
  changeOwner = async ({
    newOwner
  }: {
    newOwner: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_owner: {
        new_owner: newOwner
      }
    }, fee, memo, funds);
  };
  grantRole = async ({
    addr,
    role
  }: {
    addr: Addr;
    role: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      grant_role: {
        addr,
        role
      }
    }, fee, memo, funds);
  };
  revokeRole = async ({
    addr,
    role
  }: {
    addr: Addr;
    role: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke_role: {
        addr,
        role
      }
    }, fee, memo, funds);
  };
  pause = async ({
    expiresAt
  }: {
    expiresAt: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {
        expires_at: expiresAt
      }
    }, fee, memo, funds);
  };
  release = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      release: {}
    }, fee, memo, funds);
  };
}