/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Addr, Uint128, Coin, QueryMsg, GetBalanceResponse, GetBondResponse, ConfigResponse, GetUnbondResponse, GetUnbondListResponse, PauseInfoResponse } from "./Liquiditymanager.types";
export interface LiquiditymanagerReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<ConfigResponse>;
  pauseInfo: () => Promise<PauseInfoResponse>;
  getBalance: ({
    depositor
  }: {
    depositor: Addr;
  }) => Promise<GetBalanceResponse>;
  getBond: ({
    bonder
  }: {
    bonder: Addr;
  }) => Promise<GetBondResponse>;
  getUnbond: ({
    unbondId
  }: {
    unbondId: number;
  }) => Promise<GetUnbondResponse>;
  getUnbondsByOwner: ({
    owner
  }: {
    owner: Addr;
  }) => Promise<GetUnbondListResponse>;
}
export class LiquiditymanagerQueryClient implements LiquiditymanagerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.pauseInfo = this.pauseInfo.bind(this);
    this.getBalance = this.getBalance.bind(this);
    this.getBond = this.getBond.bind(this);
    this.getUnbond = this.getUnbond.bind(this);
    this.getUnbondsByOwner = this.getUnbondsByOwner.bind(this);
  }

  getConfig = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  pauseInfo = async (): Promise<PauseInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pause_info: {}
    });
  };
  getBalance = async ({
    depositor
  }: {
    depositor: Addr;
  }): Promise<GetBalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_balance: {
        depositor
      }
    });
  };
  getBond = async ({
    bonder
  }: {
    bonder: Addr;
  }): Promise<GetBondResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bond: {
        bonder
      }
    });
  };
  getUnbond = async ({
    unbondId
  }: {
    unbondId: number;
  }): Promise<GetUnbondResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_unbond: {
        unbond_id: unbondId
      }
    });
  };
  getUnbondsByOwner = async ({
    owner
  }: {
    owner: Addr;
  }): Promise<GetUnbondListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_unbonds_by_owner: {
        owner
      }
    });
  };
}
export interface LiquiditymanagerInterface extends LiquiditymanagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  deposit: ({
    depositor
  }: {
    depositor?: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    amount,
    withdrawer
  }: {
    amount: Coin;
    withdrawer?: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  delegate: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  undelegate: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  bond: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  startUnbond: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  unbond: ({
    unbondId
  }: {
    unbondId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  changeOwner: ({
    newOwner
  }: {
    newOwner: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  grantRole: ({
    addr,
    role
  }: {
    addr: Addr;
    role: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  revokeRole: ({
    addr,
    role
  }: {
    addr: Addr;
    role: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  pause: ({
    expiresAt
  }: {
    expiresAt: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  release: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  changeConfig: ({
    unbondingPeriod
  }: {
    unbondingPeriod: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class LiquiditymanagerClient extends LiquiditymanagerQueryClient implements LiquiditymanagerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.delegate = this.delegate.bind(this);
    this.undelegate = this.undelegate.bind(this);
    this.bond = this.bond.bind(this);
    this.startUnbond = this.startUnbond.bind(this);
    this.unbond = this.unbond.bind(this);
    this.changeOwner = this.changeOwner.bind(this);
    this.grantRole = this.grantRole.bind(this);
    this.revokeRole = this.revokeRole.bind(this);
    this.pause = this.pause.bind(this);
    this.release = this.release.bind(this);
    this.changeConfig = this.changeConfig.bind(this);
  }

  deposit = async ({
    depositor
  }: {
    depositor?: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {
        depositor
      }
    }, fee, memo, funds);
  };
  withdraw = async ({
    amount,
    withdrawer
  }: {
    amount: Coin;
    withdrawer?: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount,
        withdrawer
      }
    }, fee, memo, funds);
  };
  delegate = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delegate: {}
    }, fee, memo, funds);
  };
  undelegate = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      undelegate: {}
    }, fee, memo, funds);
  };
  bond = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      bond: {}
    }, fee, memo, funds);
  };
  startUnbond = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      start_unbond: {
        amount
      }
    }, fee, memo, funds);
  };
  unbond = async ({
    unbondId
  }: {
    unbondId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unbond: {
        unbond_id: unbondId
      }
    }, fee, memo, funds);
  };
  changeOwner = async ({
    newOwner
  }: {
    newOwner: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_owner: {
        new_owner: newOwner
      }
    }, fee, memo, funds);
  };
  grantRole = async ({
    addr,
    role
  }: {
    addr: Addr;
    role: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      grant_role: {
        addr,
        role
      }
    }, fee, memo, funds);
  };
  revokeRole = async ({
    addr,
    role
  }: {
    addr: Addr;
    role: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke_role: {
        addr,
        role
      }
    }, fee, memo, funds);
  };
  pause = async ({
    expiresAt
  }: {
    expiresAt: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {
        expires_at: expiresAt
      }
    }, fee, memo, funds);
  };
  release = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      release: {}
    }, fee, memo, funds);
  };
  changeConfig = async ({
    unbondingPeriod
  }: {
    unbondingPeriod: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_config: {
        unbonding_period: unbondingPeriod
      }
    }, fee, memo, funds);
  };
}